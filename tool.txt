Project Path: tool

Source Tree:

```
tool
├── eslint.config.js
├── index.html
├── package.json
├── public
│   └── vite.svg
├── README.md
├── src
│   ├── App.css
│   ├── App.tsx
│   ├── assets
│   │   └── react.svg
│   ├── components
│   │   └── Navbar
│   │       ├── Navbar.css
│   │       └── Navbar.tsx
│   ├── index.css
│   ├── main.tsx
│   ├── pages
│   │   ├── BTCMerge
│   │   │   ├── BTCMerge.css
│   │   │   └── BTCMerge.tsx
│   │   └── Home
│   │       ├── Home.css
│   │       └── Home.tsx
│   ├── utils
│   │   ├── bitcoin.ts
│   │   ├── blockchain.ts
│   │   └── index.ts
│   └── vite-env.d.ts
├── tsconfig.app.json
├── tsconfig.json
├── tsconfig.node.json
└── vite.config.ts

```

`\\?\C:\Users\Administrator\Desktop\react\tool\eslint.config.js`:

```js
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import tseslint from 'typescript-eslint'

export default tseslint.config(
  { ignores: ['dist'] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ['**/*.{ts,tsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
)

```

`\\?\C:\Users\Administrator\Desktop\react\tool\index.html`:

```html
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React + TS</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>

```

`\\?\C:\Users\Administrator\Desktop\react\tool\package.json`:

```json
{
  "name": "tool",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "axios": "^1.8.4",
    "buffer": "^6.0.3",
    "crypto-browserify": "^3.12.1",
    "ethers": "^6.13.5",
    "process": "^0.11.10",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-router-dom": "^7.3.0",
    "stream-browserify": "^3.0.0",
    "vite-plugin-wasm": "^3.5.0"
  },
  "devDependencies": {
    "@esbuild-plugins/node-globals-polyfill": "^0.2.3",
    "@esbuild-plugins/node-modules-polyfill": "^0.2.2",
    "@eslint/js": "^9.11.1",
    "@types/react": "^18.3.10",
    "@types/react-dom": "^18.3.0",
    "@vitejs/plugin-react": "^4.3.2",
    "axios": "^1.7.2",
    "bip32": "^4.0.0",
    "bip39": "^3.1.0",
    "bitcoinjs-lib": "^6.1.6",
    "ecpair": "^2.1.0",
    "eslint": "^9.11.1",
    "eslint-plugin-react-hooks": "^5.1.0-rc.0",
    "eslint-plugin-react-refresh": "^0.4.12",
    "globals": "^15.9.0",
    "rollup-plugin-polyfill-node": "^0.13.0",
    "tiny-secp256k1": "^2.2.3",
    "typescript": "^5.5.3",
    "typescript-eslint": "^8.7.0"
  }
}

```

`\\?\C:\Users\Administrator\Desktop\react\tool\public\vite.svg`:

```svg
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>
```

`\\?\C:\Users\Administrator\Desktop\react\tool\README.md`:

```md
# React + TypeScript + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react/README.md) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend updating the configuration to enable type aware lint rules:

- Configure the top-level `parserOptions` property like this:

```js
export default tseslint.config({
  languageOptions: {
    // other options...
    parserOptions: {
      project: ['./tsconfig.node.json', './tsconfig.app.json'],
      tsconfigRootDir: import.meta.dirname,
    },
  },
})
```

- Replace `tseslint.configs.recommended` to `tseslint.configs.recommendedTypeChecked` or `tseslint.configs.strictTypeChecked`
- Optionally add `...tseslint.configs.stylisticTypeChecked`
- Install [eslint-plugin-react](https://github.com/jsx-eslint/eslint-plugin-react) and update the config:

```js
// eslint.config.js
import react from 'eslint-plugin-react'

export default tseslint.config({
  // Set the react version
  settings: { react: { version: '18.3' } },
  plugins: {
    // Add the react plugin
    react,
  },
  rules: {
    // other rules...
    // Enable its recommended rules
    ...react.configs.recommended.rules,
    ...react.configs['jsx-runtime'].rules,
  },
})
```

```

`\\?\C:\Users\Administrator\Desktop\react\tool\src\App.tsx`:

```tsx
import { Routes, Route } from "react-router-dom";
import './App.css'
import Home from './pages/Home/Home'
import BTCMerge from "./pages/BTCMerge/BTCMerge";

const App = () => {
 
  return (
    <div>
      <Routes>
        <Route path="/" element={<Home />} />
        <Route path="/btc" element={<BTCMerge />} />
      </Routes>
    </div>
  );
 
};

export default App;
```

`\\?\C:\Users\Administrator\Desktop\react\tool\src\assets\react.svg`:

```svg
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>
```

`\\?\C:\Users\Administrator\Desktop\react\tool\src\components\Navbar\Navbar.css`:

```css
.nav {
    display: flex;
    justify-content: space-between;
    align-items: center;

    padding: 1rem 2rem;

    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.left {
    display: flex;
    align-items: center;

    gap: 2rem;
}

.right{
    display: flex;
    align-items: center;
}

.logo {
    font-size: 1.5rem;
    font-weight: bold;
    color: #000000;
  }
```

`\\?\C:\Users\Administrator\Desktop\react\tool\src\components\Navbar\Navbar.tsx`:

```tsx
import "./Navbar.css"
import { useState } from "react"

export const Navbar = () => {

    const [ activeMenu, setActiveMenu ] = useState<string|null>(null)
    const menus = {
        evm: ['转账', '归集'],
        sol: ['soon'],
        sui: ['soon']
      };


    return (
        <>
            <div className="nav">

                <div className="left">
                    <div className="logo">Tool</div>
                    <div className="evm">evm</div>
                    <div className="sol">sol</div>
                    <div className="sui"></div>
                </div>

                <div className="right">
                    <div className="github">X</div>
                    <div className="X">X</div>
                </div>
            </div>
        </>
    );
}
```

`\\?\C:\Users\Administrator\Desktop\react\tool\src\main.tsx`:

```tsx
import { StrictMode } from 'react';
import { createRoot } from 'react-dom/client';
import App from './App.tsx';
import './index.css';
import { BrowserRouter } from 'react-router-dom';
import * as buffer from 'buffer';

// 设置全局 Buffer
globalThis.Buffer = buffer.Buffer;

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <BrowserRouter>
      <App />
    </BrowserRouter>
  </StrictMode>,
);
```

`\\?\C:\Users\Administrator\Desktop\react\tool\src\pages\BTCMerge\BTCMerge.tsx`:

```tsx
// src/pages/BTCMerge/BTCMerge.tsx
import { useState } from 'react';
import './BTCMerge.css';
import { getBTCAccount, fetchUTXOs, mergeSelectedUTXOs, UTXO } from '../../utils/bitcoin';

export default function BTCMerge() {
  const [inputKey, setInputKey] = useState('');
  const [utxos, setUtxos] = useState<UTXO[]>([]);
  const [selectedIndexes, setSelectedIndexes] = useState<number[]>([]);
  const [satsPerVbyte, setSatsPerVbyte] = useState('100');
  const [targetAddress, setTargetAddress] = useState('');
  const [loading, setLoading] = useState(false);
  const [txid, setTxid] = useState('');
  const [error, setError] = useState('');
  const [address, setAddress] = useState('');

  const handleLoad = async () => {
    try {
      setError('');
      setTxid('');
      const { address, keyPair } = await getBTCAccount(inputKey);
      const fetched = await fetchUTXOs(address);
      setUtxos(fetched);
      setAddress(address);
    } catch (err: any) {
      setError(err.message || '加载失败');
    }
  };

  const toggleSelect = (i: number) => {
    setSelectedIndexes((prev) =>
      prev.includes(i) ? prev.filter(x => x !== i) : [...prev, i]
    );
  };

  const handleMerge = async () => {
    try {
      setLoading(true);
      setError('');
      setTxid('');
      const { keyPair, xOnlyPubkey } = await getBTCAccount(inputKey);
      const selected = selectedIndexes.map(i => utxos[i]);
      const tx = await mergeSelectedUTXOs({
        keyPair,
        xOnlyPubkey,
        utxos: selected,
        satsPerVbyte: parseInt(satsPerVbyte),
        targetAddress,
      });
      setTxid(tx);
    } catch (e: any) {
      setError(e.message || '合并失败');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="btc-container">
      <h2>比特币 UTXO 合并工具</h2>

      <div className="input-group">
        <label>助记词 或 私钥(WIF)</label>
        <textarea value={inputKey} onChange={e => setInputKey(e.target.value)} rows={3} />
      </div>

      <button onClick={handleLoad}>加载地址 & UTXO</button>
      {address && <p>当前地址: {address}</p>}

      {utxos.length > 0 && (
        <div className="utxo-list">
          <h4>选择要合并的 UTXO</h4>
          {utxos.map((u, i) => (
            <label key={i}>
              <input type="checkbox" checked={selectedIndexes.includes(i)} onChange={() => toggleSelect(i)} />
              {u.tx_hash.slice(0, 8)}...:{u.tx_output_n} - {u.value} sats
            </label>
          ))}
        </div>
      )}

      <div className="input-group">
        <label>手续费（sats/vByte）</label>
        <input type="number" value={satsPerVbyte} onChange={e => setSatsPerVbyte(e.target.value)} />
      </div>

      <div className="input-group">
        <label>收款地址（合并后资金将发往此地址）</label>
        <input value={targetAddress} onChange={e => setTargetAddress(e.target.value)} />
      </div>

      <button disabled={loading || selectedIndexes.length < 1} onClick={handleMerge}>
        {loading ? '合并中...' : '开始合并'}
      </button>

      {txid && <p>✅ 成功广播: <a href={`https://mempool.space/testnet/tx/${txid}`} target="_blank">{txid}</a></p>}
      {error && <p style={{ color: 'red' }}>❌ {error}</p>}
    </div>
  );
}

```

`\\?\C:\Users\Administrator\Desktop\react\tool\src\pages\Home\Home.css`:

```css
.container {
    display: flex;
    flex-direction: column;
    min-height: 100vh;
    background-color: #f8f9fa;
  }
  
  /* .navigation {
    background: #1a1a1a;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
  } */
  
  .main {
    flex: 1;
    max-width: 1000px;
    margin: 2rem auto;
    padding: 0 1.5rem;
  }
  
  .title {
    text-align: center;
    color: #2c3e50;
    margin-bottom: 2.5rem;
    font-size: 2.2rem;
  }
  
  .config-section {
    background: white;
    padding: 2rem;
    border-radius: 12px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    margin-bottom: 2rem;
  }
  
  .chain-config {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    margin-bottom: 2rem;
  }
  
  .chain-select {
    padding: 0.8rem;
    border: 2px solid #e0e0e0;
    border-radius: 8px;
    font-size: 1rem;
    background: white;
    transition: border-color 0.3s;
  }
  
  .chain-select:focus {
    border-color: #00cc88;
    outline: none;
  }
  
  .custom-config {
    display: grid;
    grid-template-columns: 1fr 120px;
    gap: 1rem;
  }
  
  .custom-config input {
    padding: 0.8rem;
    border: 2px solid #e0e0e0;
    border-radius: 8px;
    font-size: 0.95rem;
  }
  
  .custom-config input:focus {
    border-color: #00cc88;
    outline: none;
  }
  
  .input-group {
    margin-bottom: 1.5rem;
  }
  
  .input-group label {
    display: block;
    margin-bottom: 0.6rem;
    color: #4a5568;
    font-weight: 600;
  }
  
  .input-group input,
  .input-group textarea {
    width: 100%;
    padding: 0.8rem;
    border: 2px solid #e0e0e0;
    border-radius: 8px;
    font-size: 1rem;
    transition: border-color 0.3s;
  }
  
  .input-group textarea {
    font-family: monospace;
    resize: vertical;
  }
  
  .input-group input:focus,
  .input-group textarea:focus {
    border-color: #00cc88;
    outline: none;
  }
  
  .batch-section {
    background: white;
    padding: 2rem;
    border-radius: 12px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
  }
  
  .params-group {
    display: grid;
    grid-template-columns: 1fr 2fr;
    gap: 2rem;
    margin: 2rem 0;
  }
  
  .submit-btn {
    width: 100%;
    padding: 1.2rem;
    background: #00cc88;
    color: white;
    border: none;
    border-radius: 8px;
    font-size: 1.1rem;
    font-weight: 600;
    cursor: pointer;
    transition: opacity 0.3s;
  }
  
  .submit-btn:disabled {
    opacity: 0.7;
    cursor: not-allowed;
  }
  
  .task-list {
    margin-top: 2rem;
  }
  
  .task-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1.2rem;
    margin-bottom: 1rem;
    border-radius: 8px;
    background: white;
    box-shadow: 0 1px 4px rgba(0,0,0,0.05);
  }
  
  .task-item.success {
    border-left: 4px solid #00cc88;
  }
  
  .task-item.failed {
    border-left: 4px solid #ff4757;
  }
  
  .task-item.processing {
    border-left: 4px solid #ffa502;
  }
  
  .task-id {
    font-weight: 500;
    color: #2d3436;
  }
  
  .task-status a {
    color: #00cc88;
    text-decoration: none;
  }
  
  .task-status a:hover {
    text-decoration: underline;
  }
  
  .error-msg {
    color: #ff4757;
    max-width: 400px;
    word-break: break-all;
  }
```

`\\?\C:\Users\Administrator\Desktop\react\tool\src\pages\Home\Home.tsx`:

```tsx
import './Home.css'
import { Navbar } from '../../components/Navbar/Navbar';
import { useState } from 'react';
import { ethers } from 'ethers';
import { transfer } from '../../utils';

interface ChainConfig {
  rpc: string;
  chainId: number;
}

const PRESET_CHAINS: Record<string, ChainConfig> = {
  eth: {
    rpc: "https://mainnet.infura.io/v3/YOUR_PROJECT_ID",
    chainId: 1
  },
  bsc: {
    rpc: "https://bsc-dataseed.binance.org/",
    chainId: 56
  },
  base: {
    rpc: "https://mainnet.base.org",
    chainId: 8453
  }
};

interface TransferTask {
  status: 'pending' | 'processing' | 'success' | 'failed';
  hash?: string;
  error?: string;
}

export default function Home() {
  const [hexData, setHexData] = useState('');
  const [amount, setAmount] = useState('');
  const [addressList, setAddressList] = useState('');
  const [privateKey, setPrivateKey] = useState('');
  const [multiPrivateKeys, setMultiPrivateKeys] = useState('');
  const [targetAddress, setTargetAddress] = useState('');
  const [selectedChain, setSelectedChain] = useState<'eth' | 'bsc' | 'base' | 'custom'>('eth');
  const [chainConfig, setChainConfig] = useState<ChainConfig>(PRESET_CHAINS.eth);
  const [customRpc, setCustomRpc] = useState('');
  const [customChainId, setCustomChainId] = useState('');
  const [tasks, setTasks] = useState<TransferTask[]>([]);
  const [mode, setMode] = useState<'fromOneToMany' | 'fromManyToOne'>('fromOneToMany');

  const handleChainChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    const value = e.target.value as typeof selectedChain;
    setSelectedChain(value);
    
    if (value !== 'custom') {
      setChainConfig(PRESET_CHAINS[value]);
    } else {
      setChainConfig({
        rpc: customRpc,
        chainId: Number(customChainId) || 0
      });
    }
  };

  const updateCustomConfig = () => {
    setChainConfig({
      rpc: customRpc,
      chainId: Number(customChainId) || 0
    });
  };

  const validateInputs = () => {
    if (mode === 'fromOneToMany') {
      if (!privateKey.match(/^0x[a-fA-F0-9]{64}$/)) {
        throw new Error('Invalid private key format');
      }
    } else {
      const keys = multiPrivateKeys.split('\n')
        .map(k => k.trim())
        .filter(k => /^0x[a-fA-F0-9]{64}$/.test(k));
      if (keys.length === 0) {
        throw new Error('No valid private keys found');
      }
      if (!ethers.isAddress(targetAddress)) {
        throw new Error('Invalid target address');
      }
    }

    if (hexData && !ethers.isHexString(hexData)) {
      throw new Error('Hex data must start with 0x');
    }

    if (isNaN(Number(amount)) || Number(amount) < 0) {
      throw new Error('Invalid amount');
    }

    if (chainConfig.rpc === '' || chainConfig.chainId <= 0) {
      throw new Error('Invalid chain configuration');
    }
  };

  const handleBatchTransfer = async () => {
    try {
      validateInputs();
      setTasks([]);

      const provider = new ethers.JsonRpcProvider(chainConfig.rpc);

      if (mode === 'fromOneToMany') {
        const addresses = addressList.split('\n')
          .map(a => a.trim())
          .filter(a => ethers.isAddress(a));

        if (addresses.length === 0) throw new Error('No valid addresses');

        const wallet = new ethers.Wallet(privateKey, provider);
        setTasks(addresses.map(() => ({ status: 'pending' })));

        await Promise.all(addresses.map(async (to, index) => {
          try {
            setTasks(prev => {
              const copy = [...prev];
              copy[index] = { status: 'processing' };
              return copy;
            });

            const tx = await transfer({ wallet, toAddress: to, amountInEther: amount, hexData });
            setTasks(prev => {
              const copy = [...prev];
              copy[index] = { status: 'success', hash: tx.hash };
              return copy;
            });
          } catch (err) {
            setTasks(prev => {
              const copy = [...prev];
              copy[index] = {
                status: 'failed',
                error: err instanceof Error ? err.message : 'Unknown error'
              };
              return copy;
            });
          }
        }));

      } else {
        const keys = multiPrivateKeys.split('\n')
          .map(k => k.trim())
          .filter(k => /^0x[a-fA-F0-9]{64}$/.test(k));

        setTasks(keys.map(() => ({ status: 'pending' })));

        await Promise.all(keys.map(async (key, index) => {
          const wallet = new ethers.Wallet(key, provider);
          try {
            setTasks(prev => {
              const copy = [...prev];
              copy[index] = { status: 'processing' };
              return copy;
            });

            const tx = await transfer({ wallet, toAddress: targetAddress, amountInEther: amount, hexData });
            setTasks(prev => {
              const copy = [...prev];
              copy[index] = { status: 'success', hash: tx.hash };
              return copy;
            });
          } catch (err) {
            setTasks(prev => {
              const copy = [...prev];
              copy[index] = {
                status: 'failed',
                error: err instanceof Error ? err.message : 'Unknown error'
              };
              return copy;
            });
          }
        }));
      }

    } catch (error) {
      alert(error instanceof Error ? error.message : 'Transfer failed');
    }
  };

  return (
    <div className="container">
      <div className='navigation'>
        <Navbar />
      </div>

      <div className='main'>
        <h1 className='title'>批量调用合约</h1>

        <div className='config-section'>
          <div className='chain-config'>
            <label>区块链网络:</label>
            <select 
              value={selectedChain}
              onChange={handleChainChange}
              className="chain-select"
            >
              <option value="eth">Ethereum</option>
              <option value="bsc">BNB Chain</option>
              <option value="base">Base</option>
              <option value="custom">自定义网络</option>
            </select>

            {selectedChain === 'custom' && (
              <div className="custom-config">
                <input
                  type="text"
                  placeholder="RPC URL"
                  value={customRpc}
                  onChange={(e) => setCustomRpc(e.target.value)}
                  onBlur={updateCustomConfig}
                />
                <input
                  type="number"
                  placeholder="Chain ID"
                  value={customChainId}
                  onChange={(e) => setCustomChainId(e.target.value)}
                  onBlur={updateCustomConfig}
                />
              </div>
            )}

            <div className='input-group'>
              <label>转账模式:</label>
              <select value={mode} onChange={(e) => setMode(e.target.value as any)} className="chain-select">
                <option value="fromOneToMany">一个私钥转多个地址</option>
                <option value="fromManyToOne">多个私钥转一个地址</option>
              </select>
            </div>

            {mode === 'fromOneToMany' ? (
              <>
                <div className='input-group'>
                  <label>发送方私钥:</label>
                  <input
                    type="password"
                    value={privateKey}
                    onChange={(e) => setPrivateKey(e.target.value)}
                    placeholder="0x开头64位"
                  />
                </div>

                <div className='input-group'>
                  <label>接收地址列表 (每行一个):</label>
                  <textarea
                    value={addressList}
                    onChange={(e) => setAddressList(e.target.value)}
                    rows={6}
                    placeholder="0x1234...\n0xabcd..."
                  />
                </div>
              </>
            ) : (
              <>
                <div className='input-group'>
                  <label>多个发送方私钥 (每行一个):</label>
                  <textarea
                    value={multiPrivateKeys}
                    onChange={(e) => setMultiPrivateKeys(e.target.value)}
                    rows={6}
                    placeholder="0xabc...\n0xdef..."
                  />
                </div>

                <div className='input-group'>
                  <label>接收地址:</label>
                  <input
                    value={targetAddress}
                    onChange={(e) => setTargetAddress(e.target.value)}
                    placeholder="0x..."
                  />
                </div>
              </>
            )}
          </div>
        </div>

        <div className='batch-section'>
          <div className='params-group'>
            <div className='input-group'>
              <label>转账金额 (ETH):</label>
              <input
                type="number"
                value={amount}
                onChange={(e) => setAmount(e.target.value)}
                step="0.001"
              />
            </div>

            <div className='input-group'>
              <label>调用数据 (Hex):</label>
              <input
                value={hexData}
                onChange={(e) => setHexData(e.target.value)}
                placeholder="0x..."
              />
            </div>
          </div>

          <button 
            className='submit-btn'
            onClick={handleBatchTransfer}
            disabled={tasks.some(t => t.status === 'processing')}
          >
            {tasks.some(t => t.status === 'processing') 
              ? `处理中 (${tasks.filter(t => t.status === 'processing').length}/${tasks.length})`
              : '开始批量转账'}
          </button>
        </div>

        <div className='task-list'>
          {tasks.map((task, index) => (
            <div key={index} className={`task-item ${task.status}`}>
              <span className='task-id'>任务 #{index + 1}</span>
              <div className='task-status'>
                {task.status === 'success' && task.hash && (
                  <a 
                    href={`https://etherscan.io/tx/${task.hash}`}
                    target="_blank"
                    rel="noopener noreferrer"
                  >
                    查看交易
                  </a>
                )}
                {task.status === 'failed' && (
                  <span className='error-msg'>{task.error}</span>
                )}
                {task.status === 'processing' && (
                  <span className='processing'>等待确认...</span>
                )}
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
}

```

`\\?\C:\Users\Administrator\Desktop\react\tool\src\utils\bitcoin.ts`:

```ts
import * as bitcoin from 'bitcoinjs-lib';
import * as bip39 from 'bip39';
import * as bip32 from 'bip32';
import * as ecc from 'tiny-secp256k1';
import { ECPairFactory, ECPairInterface } from 'ecpair';
import axios from 'axios';
// import pLimit from 'p-limit'; // 如需并发控制，可启用

bitcoin.initEccLib(ecc);
const ECPair = ECPairFactory(ecc);
const network = bitcoin.networks.testnet;

export interface UTXO {
  tx_hash: string;
  tx_output_n: number;
  value: number;
  script: string;
}

// 缓存 tx script
const scriptCache: { [key: string]: string } = {};

// 可选并发控制（一次最多3个请求）
// const limit = pLimit(3);

async function getCachedScript(txid: string, index: number): Promise<string> {
  const key = `${txid}:${index}`;
  if (scriptCache[key]) return scriptCache[key];
  const res = await axios.get(`https://api.blockcypher.com/v1/btc/test3/txs/${txid}`);
  const script = res.data.outputs[index].script;
  scriptCache[key] = script;
  return script;
}

export async function getBTCAccount(input: string): Promise<{
  address: string;
  keyPair: ECPairInterface;
  xOnlyPubkey: Buffer;
}> {
  let keyPair: ECPairInterface;
  let xOnlyPubkey: Buffer;

  if (input.trim().split(' ').length >= 12) {
    const seed = bip39.mnemonicToSeedSync(input);
    const root = bip32.BIP32Factory(ecc).fromSeed(seed, network);
    const child = root.derivePath("m/86'/0'/0'/0/0");
    keyPair = ECPair.fromPrivateKey(child.privateKey!, { network });
    xOnlyPubkey = Buffer.from(child.publicKey.slice(1, 33));
  } else {
    keyPair = ECPair.fromWIF(input, network);
    const pub = keyPair.publicKey;
    xOnlyPubkey = pub.length === 32 ? pub : pub.slice(1, 33);
  }

  const { address } = bitcoin.payments.p2tr({ internalPubkey: xOnlyPubkey, network });
  if (!address) throw new Error('Address generation failed');
  return { address, keyPair, xOnlyPubkey };
}

export async function fetchUTXOs(address: string): Promise<UTXO[]> {
  const res = await axios.get(`https://api.blockcypher.com/v1/btc/test3/addrs/${address}?unspentOnly=true`);
  const utxos = res.data.txrefs || [];

  // 提前获取 script 并缓存，避免重复请求
  const enriched: UTXO[] = await Promise.all(utxos.map(async (utxo: any) => {
    const script = await getCachedScript(utxo.tx_hash, utxo.tx_output_n);
    return {
      tx_hash: utxo.tx_hash,
      tx_output_n: utxo.tx_output_n,
      value: utxo.value,
      script,
    };
  }));

  return enriched;
}

export async function mergeSelectedUTXOs(params: {
  keyPair: ECPairInterface,
  xOnlyPubkey: Buffer,
  utxos: UTXO[],
  satsPerVbyte: number,
  targetAddress: string,
}): Promise<string> {
  const { keyPair, xOnlyPubkey, utxos, satsPerVbyte, targetAddress } = params;
  const psbt = new bitcoin.Psbt({ network });
  let totalInputValue = 0;

  for (const utxo of utxos) {
    const script = utxo.script || await getCachedScript(utxo.tx_hash, utxo.tx_output_n);
    totalInputValue += utxo.value;
    psbt.addInput({
      hash: utxo.tx_hash,
      index: utxo.tx_output_n,
      sequence: 0xfffffffd,
      witnessUtxo: {
        script: Buffer.from(script, 'hex'),
        value: utxo.value,
      },
      tapInternalKey: xOnlyPubkey,
    });
  }

  psbt.addOutput({ address: targetAddress, value: totalInputValue });

  const signer = keyPair.tweak(
    bitcoin.crypto.taggedHash('TapTweak', xOnlyPubkey),
  );
  psbt.data.inputs.forEach((_, i) => psbt.signInput(i, signer));
  psbt.finalizeAllInputs();

  const vSize = psbt.extractTransaction().virtualSize();
  const fee = Math.ceil(vSize * satsPerVbyte);
  const finalValue = totalInputValue - fee;
  if (finalValue <= 546) throw new Error("Dust output after fee");

  // Rebuild tx with real output value
  const finalPsbt = new bitcoin.Psbt({ network });
  for (const utxo of utxos) {
    const script = utxo.script || await getCachedScript(utxo.tx_hash, utxo.tx_output_n);
    finalPsbt.addInput({
      hash: utxo.tx_hash,
      index: utxo.tx_output_n,
      sequence: 0xfffffffd,
      witnessUtxo: {
        script: Buffer.from(script, 'hex'),
        value: utxo.value,
      },
      tapInternalKey: xOnlyPubkey,
    });
  }

  finalPsbt.addOutput({ address: targetAddress, value: finalValue });
  finalPsbt.data.inputs.forEach((_, i) => finalPsbt.signInput(i, signer));
  finalPsbt.finalizeAllInputs();

  const txHex = finalPsbt.extractTransaction().toHex();

  const res = await axios.post(
    `https://api.blockcypher.com/v1/btc/test3/txs/push`,
    { tx: txHex },
    { headers: { 'Content-Type': 'application/json' } }
  );

  return res.data.tx && res.data.tx.hash;
}

```

`\\?\C:\Users\Administrator\Desktop\react\tool\src\utils\blockchain.ts`:

```ts
import { ethers, Wallet } from "ethers";

interface TransferParams {
  wallet: Wallet;                  // 已连接provider的钱包实例
  toAddress: string;               // 接收地址
  amountInEther: number | string;   // 转账金额(支持字符串或数字)
  hexData?: string;                 // 可选十六进制数据
}

async function transfer(params: TransferParams): Promise<ethers.TransactionResponse> {
  const { wallet, toAddress, amountInEther, hexData = "0x" } = params;

  // 类型安全校验
  if (!ethers.isAddress(toAddress)) {
    throw new Error("Invalid recipient address");
  }
  
  if (!ethers.isHexString(hexData)) {
    throw new Error("Hex data must be a valid 0x-prefixed string");
  }

  // 单位转换（支持字符串和数字输入）
  const value = ethers.parseEther(
    typeof amountInEther === "string" 
      ? amountInEther 
      : amountInEther.toString()
  );

  // 构造交易对象
  const tx = {
    to: toAddress,
    value,
    data: hexData,
    // 可在此扩展 gasLimit/gasPrice 等参数
  };

  try {
    // 发送交易（自动处理nonce和签名）
    const transaction = await wallet.sendTransaction(tx);
    console.log(`Transaction broadcasted: ${transaction.hash}`);
    return transaction;
  } catch (error) {
    if (error instanceof Error) {
      throw new Error(`Transfer failed: ${error.message}`);
    }
    throw new Error("Transfer failed with unknown error");
  }
}

export { transfer };
export type { TransferParams };

```

`\\?\C:\Users\Administrator\Desktop\react\tool\src\utils\index.ts`:

```ts
export * from "./blockchain"
```

`\\?\C:\Users\Administrator\Desktop\react\tool\src\vite-env.d.ts`:

```ts
/// <reference types="vite/client" />

```

`\\?\C:\Users\Administrator\Desktop\react\tool\tsconfig.app.json`:

```json
{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["src"]
}

```

`\\?\C:\Users\Administrator\Desktop\react\tool\tsconfig.json`:

```json
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ]
}

```

`\\?\C:\Users\Administrator\Desktop\react\tool\tsconfig.node.json`:

```json
{
  "compilerOptions": {
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["vite.config.ts"]
}

```

`\\?\C:\Users\Administrator\Desktop\react\tool\vite.config.ts`:

```ts
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';
import { NodeGlobalsPolyfillPlugin } from '@esbuild-plugins/node-globals-polyfill';
import wasm from 'vite-plugin-wasm';

export default defineConfig({
  plugins: [react(), wasm()],
  resolve: {
    alias: {
      stream: 'stream-browserify',
      crypto: 'crypto-browserify',
      buffer: 'buffer',
    },
  },
  optimizeDeps: {
    esbuildOptions: {
      define: {
        global: 'globalThis',
      },
      plugins: [
        NodeGlobalsPolyfillPlugin({
          process: true,
          buffer: true,
        }),
      ],
    },
  },
});
```